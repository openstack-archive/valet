#!/bin/python


import copy

from sre_parse import isdigit
from valet.engine.resource_manager.resources.host_group import HostGroup


class Naming(object):
    '''Topology generated by cannonical naming convention to capture datacenter layout.'''

    def __init__(self, _config, _logger):
        self.config = _config
        self.logger = _logger

    def set_topology(self, _datacenter, _host_groups, _hosts, _rhosts):
        '''Set datacenter layout structure.'''
        status = self._set_host_topology(_datacenter, _host_groups, _hosts, _rhosts)
        return status

    def _set_host_topology(self, _datacenter, _host_groups, _hosts, _rhosts):
        '''Set datacenter resource structure (racks, hosts).'''

        status = "success"

        for rhk, rh in _rhosts.iteritems():
            h = copy.deepcopy(rh)

            if "infra" not in h.tag:
                h.tag.append("infra")

            (rack_name, parsing_status) = self._set_layout_by_name(rhk)
            if parsing_status != "success":
                self.logger.warn(parsing_status + " in host_name (" + rhk + ")")

            if rack_name not in _host_groups.keys():
                host_group = HostGroup(rack_name)
                host_group.host_type = "rack"
                _host_groups[host_group.name] = host_group

            h.host_group = _host_groups[rack_name]
            _hosts[h.name] = h

        for hgk, hg in _host_groups.iteritems():
            hg.parent_resource = _datacenter

            for _, h in _hosts.iteritems():
                if h.host_group.name == hgk:
                    hg.child_resources[h.name] = h

            _datacenter.resources[hgk] = hg

        if "none" in _host_groups.keys():
            self.logger.warn("some hosts are into unknown rack")

        return status

    def _set_layout_by_name(self, _host_name):
        '''Set the rack-host layout, use host nameing convention.'''

        region_name = None
        rack_name = None
        host_name = None

        index = 0
        end_of_region_index = 0
        end_of_rack_index = 0
        end_of_host_index = 0

        status = "success"

        for c in _host_name:
            if index >= self.config.num_of_region_chars:
                if not isdigit(c):
                    if end_of_region_index == 0:
                        if c not in self.config.rack_code_list:
                            status = "invalid rack_char = " + c
                            break
                        end_of_region_index = index

                    if end_of_rack_index == 0 and end_of_region_index > 0 and index > end_of_region_index:
                        if c not in self.config.node_code_list:
                            status = "invalid node_char = " + c
                            break
                        end_of_rack_index = index

                    # when a non digit char is found after parsing host identifier
                    if end_of_host_index == 0 and end_of_rack_index > 0 and index > end_of_rack_index:
                        end_of_host_index = index
                        break

                    # when a '.' char is found after parsing host identifier
                    if end_of_host_index == 0 and c == '.':
                        end_of_host_index = index
                        break
            index += 1

        if status == "success":
            region_name = _host_name[:end_of_region_index]
            rack_name = _host_name[end_of_region_index:end_of_rack_index]
            if end_of_host_index > 0:
                host_name = _host_name[end_of_rack_index:end_of_host_index]
            else:
                host_name = _host_name[end_of_rack_index:]

            if len(region_name) <= self.config.num_of_region_chars:
                status = "incorrect format of region name = " + region_name
                return ('none', status)
            if len(rack_name) < 2:
                status = "incorrect format of rack name = " + rack_name
                return ('none', status)
            if len(host_name) < 2:
                status = "incorrect format of compute host name = " + host_name
                return ('none', status)

            rack_full_name = region_name + rack_name

            return (rack_full_name, status)
        else:
            return ('none', status)
